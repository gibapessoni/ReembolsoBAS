Sistema de Gest√£o de Reembolsos BAS
Um sistema para gerenciar solicita√ß√µes de reembolso de despesas m√©dicas, com perfis de administrador, RH, gerente RH e empregado.
Pr√©-requisitos
.NET 8.0 SDK
Baixe em: https://dotnet.microsoft.com/download

SQL Server (ou SQL Server Express)

Voc√™ pode rodar localmente (ex.: SQL Server Developer/Express) ou usar um container Docker do SQL Server.

Editor de c√≥digo (por exemplo, Visual Studio 2022/2023, VS Code, Rider)

Git (para clonar o reposit√≥rio)

(Opcional) Docker e Docker Compose
Caso deseje construir e rodar a API dentro de container, o Dockerfile j√° est√° fornecido.

üõ†Ô∏è Passo a passo para configurar o projeto
1. Clonar o reposit√≥rio
No terminal, execute:

git clone https://github.com/gibapessoni/ReembolsoBAS.git
cd ReembolsoBAS
2. Ajustar a Connection String no appsettings.json
Abra o arquivo ReembolsoBAS/appsettings.json e encontre a se√ß√£o:

"ConnectionStrings": {
  "DefaultConnection": "Server=seu_servidor;Database=ReembolsoBAS;User Id=seu_user;Password=sua_senha;TrustServerCertificate=True;"
}
Substitua "seu_servidor" pelo nome ou endere√ßo do seu SQL Server (por ex.: localhost\SQLEXPRESS, 127.0.0.1 ou nome-do-container).

Substitua "seu_user" e "sua_senha" pelas credenciais do seu banco, se n√£o usar autentica√ß√£o integrada.

Se preferir usar Autentica√ß√£o Integrada (Trusted Connection), coloque algo como:


"DefaultConnection": "Server=localhost\\SQLEXPRESS;Database=ReembolsoBAS;Integrated Security=True;TrustServerCertificate=True;"
Salve o arquivo.

3. Criar o banco de dados e executar as migrations
Abra um terminal na pasta raiz do projeto (onde est√° o arquivo .csproj).

Certifique-se de que o comando dotnet (vers√£o 8.0) est√° dispon√≠vel no seu PATH.

		dotnet --version
Deve retornar algo como 8.0.x.

Rode os comandos do EF Core para gerar as tabelas no SQL Server:

# 3.1. Adicionar a migration inicial (somente se ainda n√£o existirem migrations):
dotnet ef migrations add InitialCreate --context AppDbContext

# 3.2. Aplicar a migration ao banco (criar o banco caso ainda n√£o exista):
dotnet ef database update --context AppDbContext
O comando acima vai criar as tabelas necess√°rias (Usuarios, Empregados, Reembolsos, PoliticasBAS, ReembolsoLancamentos etc.) dentro do banco ReembolsoBAS.

Se voc√™ j√° tiver rodado essas migrations antes, pode pular a etapa add InitialCreate e ir direto em database update.

4. Executar a API localmente (.NET 8.0)
Ainda no terminal, dentro da pasta do projeto:

		cd ReembolsoBAS
		dotnet run
O ASP.NET levantar√° a aplica√ß√£o e, por padr√£o, utilizaremos https://localhost:5001 (ou a porta din√¢mica que aparecer no console).

Voc√™ ver√° no console algo como:

Building...
Now listening on: https://localhost:5001
Application started. Press Ctrl+C to shut down.

5. Testar no Swagger UI
Assim que a API estiver rodando, abra o navegador em:

https://localhost:5001/swagger/index.html
O Swagger exibir√° todas as rotas dispon√≠veis (sem exigir nenhum token de JWT).

Voc√™ poder√° testar cada endpoint diretamente pela interface do Swagger.

üìÇ Estrutura principal do projeto
ReembolsoBAS/

Controllers/

-EmpregadosController.cs

-PoliticasController.cs

-ReembolsosController.cs

‚Ä¶ (outros controllers, agora sem nenhum [Authorize])

Data/

-AppDbContext.cs (configura√ß√£o do EF Core)

Models/

-Empregado.cs, Reembolso.cs, Usuario.cs, PoliticaBAS.cs, etc.

Services/

-FileStorageService.cs (para upload de arquivos)

-ReembolsoService.cs (l√≥gica de neg√≥cios de valida√ß√£o/aprova√ß√£o)

Uploads/

-Pasta f√≠sica (no disco) onde arquivos enviados ser√£o salvos.

Program.cs (configura√ß√£o geral, sem autentica√ß√£o)

appsettings.json (connection string e logging)

Dockerfile (explicado abaixo)

Para quem quiser usar Docker
Existe um Dockerfile j√° configurado para empacotar a API numa imagem Docker. Ele faz o build da aplica√ß√£o e exp√µe na porta 80 (HTTP). A estrutura √© dividida em quatro est√°gios:

Passo a passo para usar o Dockerfile
Construir a imagem Docker
Na raiz do projeto (onde fica o Dockerfile), execute:

docker build -t reembolsobas-api:latest .
Isso ir√° gerar uma imagem local chamada reembolsobas-api:latest.

Rodar o container

		docker run -d \
		  -p 8080:80 \
		  -e ConnectionStrings__DefaultConnection="Server=seu_servidor;Database=ReembolsoBAS;User Id=seu_user;Password=sua_senha;TrustServerCertificate=True;" \
		  --name reembolsobas_container \
		  reembolsobas-api:latest
Explica√ß√£o dos par√¢metros:

-d roda o container em modo ‚Äúdetach‚Äù (em segundo plano).

-p 8080:80 mapeia a porta 80 do container para a porta 8080 da sua m√°quina host.

-e ConnectionStrings__DefaultConnection="..." passa a connection string via vari√°vel de ambiente (use __ para separar n√≠veis JSON).

--name reembolsobas_container d√° um nome ao container.

Testar a API dentro do container
Depois que o container estiver rodando, abra no navegador:

		http://localhost:8080/swagger/index.html
Ou fa√ßa chamadas de API apontando para http://localhost:8080/api/....

Parar e remover o container (quando n√£o precisar mais)

		docker stop reembolsobas_container
		docker rm reembolsobas_container

Se quiser apagar tamb√©m a imagem local:
		docker rmi reembolsobas-api:latest


		 Conclus√£o
Ap√≥s seguir estes passos, o usu√°rio que clonar o reposit√≥rio ter√°:

O projeto configurado para .NET 8.0.

O banco de dados criado e atualizado automaticamente pelas migrations (EF Core).

Uma API rodando em https://localhost:5001 (ou em outra porta que o .NET escolheu).

A pasta Uploads/ pronta para armazenar documentos enviados.

A possibilidade de rodar tudo nativamente ou via Docker, sem autentica√ß√£o JWT.

Dessa forma, quem baixar o projeto poder√° come√ßar a usar imediatamente, chamando qualquer rota (GET, POST, PUT, DELETE) no Swagger ou pelo seu cliente HTTP favorito.

Se restar alguma d√∫vida ou ocorrer algum erro, verifique:

A connection string (se est√° apontando para o SQL Server correto).

Permiss√µes de grava√ß√£o na pasta Uploads/.

Se as migrations foram aplicadas de fato (dotnet ef database update).
